BASE_URL = "http://www.ytv.com/videos/"
YTV_PLAYER_KEY = "AQ~~,AAAAocwuf3E~,OkU0MlqQwrSzQO2jTf7KgSe64XrUuKHP"
YTV_PLAYER_ID = "912499644001"
AMF_URL = 'http://c.brightcove.com/services/messagebroker/amf'

####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	video = AmfRequest(playerID=YTV_PLAYER_ID, playerKey=YTV_PLAYER_KEY, videoPlayer=url.split('videoID=')[1])
	Log(video)
	title = video['displayName']
	thumb = video['thumbnailURL']
	summary = video['shortDescription']

	duration = int(video['length'])
	
	return VideoClipObject(
		url = url,
		title = title,
		summary = summary,
		duration = duration,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, videoId=url.split('videoID=')[1]))],
			)
	]

####################################################################################################
@indirect
def PlayVideo(videoId):
    video = AmfRequest(playerID=YTV_PLAYER_ID, playerKey=YTV_PLAYER_KEY, videoPlayer=videoId)
    video_url = video['IOSRenditions'][0]['defaultURL']
    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))
    #video_url = video['renditions'][0]['defaultURL']
    #(url, clip) = video_url.split('&', 1)

    #return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=url, clip=clip))))

####################################################################################################
def AmfRequest(playerID=None, playerKey=None, videoPlayer=None):

    endpoint = AMF_URL
    if playerKey:
        endpoint += '?playerKey=%s' % playerKey

    client = AMF.RemotingService(url=endpoint, user_agent='', client_type=3)
    service = client.getService('com.brightcove.experience.ExperienceRuntimeFacade')

    AMF.RegisterClass(ContentOverride, 'com.brightcove.experience.ContentOverride')
    AMF.RegisterClass(ViewerExperienceRequest, 'com.brightcove.experience.ViewerExperienceRequest')

    video_obj = ContentOverride(videoPlayer)
    experience = ViewerExperienceRequest(playerID, playerKey, video_obj)

    return service.getDataForExperience('', experience)['programmedContent']['videoPlayer']['mediaDTO']

####################################################################################################
class ContentOverride(object):
  def __init__ (self, videoPlayer=None):
    self.contentType = int(0)
    self.contentIds = None
    self.target = 'videoPlayer'
    self.contentId = int(videoPlayer)
    self.featuredRefId = None
    self.contentRefIds = None
    self.featuredId = float('nan')
    self.contentRefId = None

class ViewerExperienceRequest(object):
  def __init__ (self, playerID=None, playerKey=None, video_obj=None):
    self.experienceId = int(playerID)
    self.playerKey = playerKey
    self.contentOverrides = []
    self.contentOverrides.append(video_obj)
    self.TTLToken = ''
    self.URL = ''
    self.deliveryType = float('nan')
